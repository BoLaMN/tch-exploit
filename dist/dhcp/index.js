var args, path, server, toHexArray;

server = require('./server');

path = require('path');

args = require('../args');

toHexArray = function(str) {
  return str.split('').map(function(d, i) {
    return str.charCodeAt(i);
  });
};

module.exports = function(ip, acsurl, acspass) {
  var fullip, vendor;
  fullip = ip;
  ip = ip.split('.');
  ip.pop();
  ip = ip.join('.');
  acsurl = toHexArray(acsurl);
  acspass = acspass ? toHexArray(acspass) : [84, 101, 108, 115, 116, 114, 97];
  vendor = [1, acsurl.length].concat(acsurl.concat([2, acspass.length].concat(acspass)));
  server.createServer({
    range: [ip + '.10', ip + '.15'],
    forceOptions: ['router', 'hostname', 'vendor'],
    randomIP: true,
    vendor: vendor,
    netmask: '255.255.255.0',
    dns: args.dnsserver ? [fullip] : ['8.8.8.8', '8.8.4.4'],
    router: [ip + '.1'],
    hostname: 'second.gateway',
    broadcast: ip + '.255',
    server: ip + '.1'
  }).on('listening', function(sock, type) {
    var address, port, ref;
    ref = sock.address(), address = ref.address, port = ref.port;
    return console.log("Waiting for DHCP" + type + " request... " + address + ":" + port);
  }).on('message', function(data) {
    return console.log('### MESSAGE', JSON.stringify(data));
  }).on('bound', function(state, ans) {
    return console.log('### BOUND', JSON.stringify(state));
  }).on('error', function(err, data) {
    if (!data) {
      return;
    }
    return console.log('!!! ERROR', err, data);
  }).listen(67);
  return server;
};
