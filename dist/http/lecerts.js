var ACME, args, duckdns, existsSync, ref, writeFileSync;

ref = require('fs'), writeFileSync = ref.writeFileSync, existsSync = ref.existsSync;

ACME = require('@root/acme');

duckdns = require('acme-dns-01-duckdns');

args = require('../args');

module.exports = function(domain) {
  var acme, dns01;
  if (existsSync('./key.key') && existsSync('./cert.cert')) {
    console.log("key.key and key.key already exists!");
    return;
  }
  if (args.duckdnstoken) {
    dns01 = duckdns.create({
      baseUrl: 'https://www.duckdns.org/update',
      token: args.duckdnstoken
    });
    console.log("Requesting HTTPS certificate to LE via duckdns...");
  } else {
    console.log("No duckdns token!!");
    return;
  }
  acme = ACME.create({
    maintainerEmail: 'tch-exploit@github.com',
    packageAgent: 'tch-exploit/v1.0'
  });
  return acme.init('https://acme-v02.api.letsencrypt.org/directory').then(function(r) {
    var Keypairs;
    Keypairs = require('@root/keypairs');
    return Keypairs.generate({
      kty: 'EC',
      format: 'jwk'
    }).then(function(accountKeypair) {
      return acme.accounts.create({
        subscriberEmail: 'tch-exploit@github.com',
        agreeToTerm: true,
        accountKey: accountKeypair["private"]
      }).then(function(account) {
        console.log("Starting LetsEncrypt DNS challenge via duckdns...");
        return Keypairs.generate({
          kty: 'RSA',
          format: 'jwk'
        }).then(function(serverKeypair) {
          return Keypairs["export"]({
            jwk: serverKeypair["private"]
          }).then(function(privateKey) {
            var CSR, PEM, punycode;
            CSR = require('@root/csr');
            PEM = require('@root/pem');
            punycode = require('punycode');
            return CSR.csr({
              jwk: serverKeypair["private"],
              domains: [punycode.toASCII(domain)],
              encoding: 'der'
            }).then(function(csrDer) {
              var csr;
              csr = PEM.packBlock({
                type: 'CERTIFICATE REQUEST',
                bytes: csrDer
              });
              return acme.certificates.create({
                account: account,
                accountKey: accountKeypair["private"],
                csr: csr,
                domains: [domain],
                challenges: {
                  'dns-01': dns01
                }
              }).then(function(pems) {
                console.log("Key:");
                console.log(privateKey);
                console.log("Cert:");
                console.log(pems.cert);
                console.log("Certificate received, saving to key.key and cert.cert!");
                writeFileSync('./key.key', privateKey);
                return writeFileSync('./cert.cert', pems.cert);
              });
            });
          });
        });
      });
    });
  });
};
