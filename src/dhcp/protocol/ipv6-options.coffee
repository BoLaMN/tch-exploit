{ Parser } = require 'binary-parser-encoder'

Ether = new Parser()
  .array 'HDest',
    type: 'uint8'
    length: 6
  .array 'HSource',
    type: 'uint8'
    length: 6
  .uint16be 'h_proto'

AuthBorderRouter = new Parser()
  .uint16 'VersionLow'
  .uint16 'VersionHigh'
  .uint16 'ValidLifetime'
  .array '6lbrAddress',
    type: 'uint8'
    length: 16

Advinterval = new Parser()
  .uint16 'Reserved'
  .uint32 'Interval'

AddrRegistration = new Parser()
  .uint8 'Status'
  .uint24 'Reserved'
  .uint16 'RegistrationLifetime'
  .string 'eui64'
    encoding: 'hex'
    length: 16

Capport = new Parser()

Certificate = new Parser()

Cga = new Parser()
  .uint8 'PadLength'
  .uint8 'Reserved'
  cgaItem: ''
  .16 bytes 'Modifier'
  .8 bytes 'SubnetPrefix'
  .1 bytes 'Count'
  .uint16 'ExtType'
  .uint16 'ExtLength'
  .bytes 'ExtData'
  .bytes 'Padding'

FlagsExtension = new Parser()
  .bit1 'H'
  .bit1 'M'
  .bit1 'O'
  .bit1 'P'
  .uint16 'Prf'
  .uint16 'Reserved'

IpAddressPrefix = new Parser()
  .uint8 'OptionCode'
  .uint8 'PrefixLen'
  .uint32 'Reserved'
  .array 'Ipv6Address',
    type: 'uint8'
    length: 16

LinkLayerAddress = new Parser()
  .uint8 'OptionCode'
  .bytes 'Bytes'

Mtu = new Parser()
  .uint16 'Reserved'
  .uint32 'Mtu'

Nbma = new Parser()
  .uint8 'ShortcutLimit'
  .uint8 'Reserved'
  .uint32 'reserved2'

NewRouterPrefixInfo = new Parser()
  .uint8 'OptionCode'
  .uint8 'PrefixLen'
  .uint32 'Reserved'
  .array 'Prefix',
    type: 'uint8'
    length: 16

Pref64 = new Parser()
  .uint16 'ScaledLifetime'
  .uint16 'Plc'
  .array 'Prefix',
    type: 'uint8'
    length: 16

PrefixInformation = new Parser()
  .uint8 'Length'
  .nest 'Flag'
    type: new Parser()
      .bit1 'A'
      .bit1 'L'
      .bit1 'R'
      .uint8 'Reserved'
  .uint32 'ValidLifetime'
  .uint32 'PreferredLifetime'
  .uint32 'Reserved'
  .array 'Prefix',
    type: 'uint8'
    length: 16

ProxySignature = new Parser()
  .uint32 'Reserved'
  .bytes 'KeyHash'
  .bytes 'DigitalSignaturePadding'

RecursiveDnsServer = new Parser()
  .uint16 'Reserved'
  .uint32 'Lifetime'

RedirectedHeader = new Parser()
  .uint48 'Reserved'
  .none 'Header'

RouteInfo = new Parser()
  .uint8 'PrefixLen'
  .nest 'Flag'
    type: new Parser()
      .uint8 'Reserved'
      .uint8 'RoutePreference'
  .uint32 'RouteLifetime'
  .array 'Prefix',
    type: 'uint8'
    length: 16

Rsa = new Parser()
  .uint16 'Reserved'
  .bytes 'KeyHash'
  .bytes 'DigitalSignaturePadding'

Timestamp = new Parser()
  .uint48 'Reserved'
  .uint64 'Timestamp'

HandoverKeyRequest = new Parser()
  .uint8 'PadLength'
  .uint8 'At'
  .uint8 'Reserved'
  .uint16 'Lifetime'
  .bytes 'EncryptionPublicKey'
  .bytes 'Padding'

HandoverKeyReply = new Parser()
  .uint8 'PadLength'
  .uint8 'At'
  .uint8 'Reserved'
  .bytes 'EncryptedHandoverKey'
  .bytes 'Padding'

Nonce = new Parser()

HomeagentInfo = new Parser()
  .uint16 'Reserved'
  .uint16 'Preference'
  .uint16 'Lifetime'

HandoverAssistInfo = new Parser()
  .uint8 'OptionCode'
  .uint8 'Length'
  .bytes 'Value'
  .bytes 'Padding'

NeighborAdvAck = new Parser()
  .uint8 'OptionCode'
  .uint8 'Status'
  .array 'SuppliedNcoa',
    type: 'uint8'
    length: 16
  .uint8 'Reserved'

MobileNodeId = new Parser()
  .uint8 'OptionCode'
  .uint8 'Length'
  .bytes 'Value'
  .bytes 'Padding'

TrustAnchor = new Parser()
  .uint8 'NameType'
  .string 'Fqdn'
  .bytes 'Padding'

MAP = new Parser()
  .uint8 'Distance'
  .uint8 'Preference'
  .nest 'Flag'
    type: new Parser()
      .bit1 'R'
      .uint8 'Reserved'
  .uint32 'ValidLifetime'
  .array 'GlobalAddress',
    type: 'uint8'
    length: 16

SourceLinkAddr = new Parser()
  .ether 'LinkAddr'
  .ether 'SourceLinkAddr'
  .string 'linkAddrEUI64'
    encoding: 'hex'
    length: 16
  .string 'sourceLinkAddrEUI64'
    encoding: 'hex'
    length: 16
  .ether 'LinkAddr'
  .ether 'SourceLinkAddr'
  .bytes 'Padding'

TargetLinkAddr = new Parser()
  .ether 'LinkAddr'
  .ether 'TargetLinkAddr'
  .string 'LinkAddrEUI64'
    encoding: 'hex'
    length: 16
  .string 'TargetLinkAddrEUI64'
    encoding: 'hex'
    length: 16
  .bytes 'Padding'

SourceAddrList = new Parser()
  .uint48 'Reserved'
  .array 'Ipv6Address',
    type: 'uint8'
    length: 16

TargetAddrList = new Parser()
  .uint48 'Reserved'
  .array 'Ipv6Address',
    type: 'uint8'
    length: 16

DnsSearchList = new Parser()
  .uint16 'Reserved'
  .uint32 'Lifetime'
  .bytes 'Padding'
  .string 'Dnssl'

6Cio = new Parser()
  .uint16 'Unassigned1'
  .uint16 'FlagG'
  .uint32 'Unassigned2'

6LowpanContext = new Parser()
  .uint8 'ContextLength'
  .nest 'Flag'
    type: new Parser()
      .bit1 'C'
      .uint8 'Cid'
      .uint8 'Reserved'
  .uint16 'Reserved'
  .uint16 'ValidLifetime'
  .array 'ContextPrefix',
    type: 'uint8'
    length: 16

module.exports = new Parser()
  .uint8 'Type'
  .uint8 'Length'
  .choice
    tag: 'Type'
    choices:
      1: SourceLinkAddr
      2: TargetLinkAddr
      3: PrefixInformation
      4: RedirectedHeader
      5: Mtu
      6: Nbma
      7: AdvertisementInterval
      8: HomeAgentInfo
      9: SourceAddrList
      10: TargetAddrList
      11: Cga
      12: Rsa
      13: Timestamp
      14: Nonce
      15: TrustAnchor
      16: Certificate
      17: IpAddressPrefix
      18: NewRouterPrefixInfo
      19: LinkLayerAddress
      20: NeighborAdvAck
      23: MAP
      24: RouteInfo
      25: RecursiveDnsServer
      26: FlagsExtension
      27: HandoverKeyRequest
      28: HandoverKeyReply
      29: HandoverAssistInfo
      30: MobileNodeId
      31: DnsSearchList
      32: ProxySignature
      33: AddrRegistration
      34: 6LowpanContext
      35: AuthBorderRouter
      36: 6Cio
      37: Capport
      38: Pref64

