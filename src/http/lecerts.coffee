{writeFileSync, existsSync} = require 'fs'
ACME = require '@root/acme'
duckdns = require 'acme-dns-01-duckdns'

args = require '../args'

module.exports = (domain) ->
    if(existsSync('./key.key') && existsSync('./cert.cert'))
      console.log("key.key and key.key already exists!")
      return
    if(args.duckdnstoken)
      dns01 = duckdns.create({
        baseUrl: 'https://www.duckdns.org/update',
        token: args.duckdnstoken
      });
      console.log("Requesting HTTPS certificate to LE via duckdns...")
    else
      console.log("No duckdns token!!")
      return
    acme = ACME.create({ maintainerEmail:'tch-exploit@github.com', packageAgent:'tch-exploit/v1.0' })
    acme.init('https://acme-v02.api.letsencrypt.org/directory').then((r) ->
      Keypairs = require('@root/keypairs');
      Keypairs.generate({ kty: 'EC', format: 'jwk' }).then((accountKeypair) ->
        acme.accounts.create({
          subscriberEmail:'tch-exploit@github.com',
          agreeToTerm:true,
          accountKey:accountKeypair.private
        }).then((account) ->
          console.log("Starting LetsEncrypt DNS challenge via duckdns...")
          Keypairs.generate({ kty: 'RSA', format: 'jwk' }).then((serverKeypair) ->
            Keypairs.export({ jwk: serverKeypair.private }).then((privateKey) ->
              CSR = require('@root/csr')
              PEM = require('@root/pem')
              punycode = require('punycode')
              CSR.csr({ jwk: serverKeypair.private, domains: [punycode.toASCII(domain)], encoding:'der' }).then((csrDer) ->
                csr = PEM.packBlock({ type: 'CERTIFICATE REQUEST', bytes: csrDer });
                acme.certificates.create({
                  account: account,
                  accountKey: accountKeypair.private,
                  csr: csr,
                  domains: [domain],
                  challenges: { 'dns-01': dns01 }
                }).then( (pems) ->
                  console.log("Key:")
                  console.log(privateKey)
                  console.log("Cert:")
                  console.log(pems.cert)
                  console.log("Certificate received, saving to key.key and cert.cert!")
                  writeFileSync('./key.key', privateKey)
                  writeFileSync('./cert.cert', pems.cert)
                )
              )
            )
          )
        )
      )
    )
